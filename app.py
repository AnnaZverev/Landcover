# =======================================================================
# –®–ê–ì 1: –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
# =======================================================================
import os
import json
import ee
import geemap
import gradio as gr
import html

# =======================================================================
# –®–ê–ì 2: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GEE (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞)
# =======================================================================
print("\n--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Earth Engine ---")
try:
    # Render —Å–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ /etc/secrets/google_credentials.json
    secret_file_path = '/etc/secrets/google_credentials.json'
    if os.path.exists(secret_file_path):
        print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª Render...")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞
        credentials = ee.ServiceAccountCredentials(None, key_file=secret_file_path)
        ee.Initialize(credentials=credentials)
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç GEE –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    else:
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        print("–°–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        ee.Authenticate()
        ee.Initialize(project='gen-lang-client-0605302377')
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GEE –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ.")

except Exception as e:
    print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GEE: {e}")

# =======================================================================
# –®–ê–ì 3: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
# =======================================================================
gee_classifier = None
bands_for_training = ['B2', 'B3', 'B4', 'B8', 'NDVI']

def add_ndvi(image):
    ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI')
    return image.addBands(ndvi)

def train_classifier():
    global gee_classifier
    if gee_classifier:
        print("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –æ–±—É—á–µ–Ω.")
        return

    print("‚è≥ –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ GEE... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")
    try:
        desert = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_desert_samples').map(lambda f: f.set('class', 0))
        solonchak = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_solonchak_samples').map(lambda f: f.set('class', 1))
        arid = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_arid_samples').map(lambda f: f.set('class', 2))
        greenery = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_greenery_samples').map(lambda f: f.set('class', 3))
        water = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_water_samples').map(lambda f: f.set('class', 4))
        
        training_points = desert.merge(solonchak).merge(arid).merge(greenery).merge(water)
        roi_for_training = training_points.geometry().bounds()

        image_for_training = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED') \
            .filterDate('2023-06-01', '2023-09-01') \
            .filterBounds(roi_for_training) \
            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10)) \
            .map(add_ndvi) \
            .median() \
            .clip(roi_for_training)

        training_data = image_for_training.select(bands_for_training).sampleRegions(
            collection=training_points, properties=['class'], scale=10, tileScale=4)

        gee_classifier = ee.Classifier.smileRandomForest(numberOfTrees=50).train(
            features=training_data, classProperty='class', inputProperties=bands_for_training)
        print("‚úÖ –ú–æ–¥–µ–ª—å-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ 5 –∫–ª–∞—Å—Å–∞—Ö!")
    except Exception as e:
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")

train_classifier()

# =======================================================================
# –®–ê–ì 4: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã Gradio-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# =======================================================================

def get_region_info(region_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ BBOX –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."""
    regions = {
        "–ö–∞–ª–º—ã–∫–∏—è (–û–∑–µ—Ä–æ –ù—É—Ä—ã–Ω-–•–∞–≥)": {
            "center": [46.817790, 45.354546],
            "bbox": [45.20, 46.70, 45.50, 46.90] # –ù–µ–º–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–∏–ª –æ–±–ª–∞—Å—Ç—å
        },
        "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (–û–∑–µ—Ä–æ –≠–ª—å—Ç–æ–Ω)": {
            "center": [49.13, 46.69],  
            "bbox": [46.49, 49.03, 46.89, 49.23] 
        },
        "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π (–ß–æ–≥—Ä–∞–π—Å–∫–æ–µ –≤–¥—Ö—Ä.)": {
            "center": [45.45, 44.70],
            "bbox": [44.50, 45.35, 44.90, 45.55]
        },
        "–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (–í–æ—Å—Ç–æ—á–Ω—ã–µ —Å—Ç–µ–ø–∏)": {
            "center": [46.40, 43.65],
            "bbox": [43.45, 46.30, 43.85, 46.50]
        },
        "–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π (–ö—É–ª—É–Ω–¥–∏–Ω—Å–∫–∞—è —Å—Ç–µ–ø—å)": {
            "center": [53.00, 79.70],
            "bbox": [79.50, 52.90, 79.90, 53.10]
        },
        "–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (–°–æ–ª—å-–ò–ª–µ—Ü–∫)": {
            "center": [51.16, 54.99],
            "bbox": [54.79, 51.06, 55.19, 51.26]
        }
    }
    return regions.get(region_name)

def generate_classified_map(region_info, year, classifier):
    if not classifier: return None, "–û—à–∏–±–∫–∞: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –æ–±—É—á–µ–Ω."
    print(f"-- –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –¥–ª—è {year} –≥–æ–¥–∞...")
    roi_to_classify = ee.Geometry.Rectangle(region_info['bbox'])
    collection = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED') \
        .filterDate(f'{year}-06-01', f'{year}-09-01') \
        .filterBounds(roi_to_classify) \
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 25))
    if collection.size().getInfo() == 0: return None, f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–Ω–∏–º–∫–æ–≤ –∑–∞ {year} –≥–æ–¥."
    image_to_classify = collection.map(add_ndvi).median().clip(roi_to_classify)
    classified_image = image_to_classify.classify(classifier)
    class_palette = ['#e3a25a', '#ffffff', '#ffff00', '#00ff00', '#0000FF'] # –ü—É—Å—Ç—ã–Ω—è, –°–æ–ª–æ–Ω—á–∞–∫, –°—É—Ö–∞—è —Å—Ç–µ–ø—å, –ó–µ–ª–µ–Ω—å, –í–æ–¥–∞
    vis_params = {'min': 0, 'max': 4, 'palette': class_palette}
    map_id = classified_image.getMapId(vis_params)
    print(f"-- ‚úÖ –ö–∞—Ä—Ç–∞ –¥–ª—è {year} –≥–æ–¥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
    return {"center": region_info['center'], "tile_url": map_id['tile_fetcher'].url_format, "year": year}, None

def create_map_iframe_html(map_data, region_name):
    """–°–æ–∑–¥–∞–µ—Ç HTML –∫–æ–¥ –æ–¥–Ω–æ–≥–æ iframe —Å –∫–∞—Ä—Ç–æ–π Leaflet –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º —Å–ª–æ–µ–≤."""
    center = map_data['center']
    tile_url = map_data['tile_url']
    year = map_data['year']

    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JavaScript –∫–æ–¥ –≤ HTML-—à–∞–±–ª–æ–Ω
    iframe_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>–ö–∞—Ä—Ç–∞ {year}</title>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
        <style>html, body, #map {{ height: 100%; width: 100%; margin: 0; padding: 0; }}</style>
    </head>
    <body>
        <div id="map"></div>
        <script>
            // 1. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–∏
            var osm = L.tileLayer('https://{{s}}.tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png', {{
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            }});

            // !!! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Å–ª–æ–π –æ—Ç Google !!!
            var googleSatellite = L.tileLayer('https://{{s}}.google.com/vt/lyrs=s&x={{x}}&y={{y}}&z={{z}}',{{
                maxZoom: 20,
                subdomains:['mt0','mt1','mt2','mt3'],
                attribution: 'Google Satellite'
            }});

            // 2. –°–æ–∑–¥–∞–µ–º —Å–ª–æ–π-–Ω–∞–ª–æ–∂–µ–Ω–∏–µ (–≤–∞—à–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
            var geeClassification = L.tileLayer(`{tile_url}`, {{
                attribution: 'Google Earth Engine',
                opacity: 0.7
            }});

            // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            var map = L.map('map', {{
                center: [{center[0]}, {center[1]}],
                zoom: 12,
                layers: [googleSatellite, geeClassification] // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–ø–µ—Ä—å —Å–ø—É—Ç–Ω–∏–∫ Google
            }});

            // 4. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å–ª–æ–µ–≤
            var baseMaps = {{
                "–°–ø—É—Ç–Ω–∏–∫ Google": googleSatellite, // –ò–°–ü–†–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
                "–ö–∞—Ä—Ç–∞-—Å—Ö–µ–º–∞": osm
            }};

            var overlayMaps = {{
                "–ù–∞—à–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": geeClassification
            }};

            // 5. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–ª–æ–µ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
            L.control.layers(baseMaps, overlayMaps).addTo(map);

        </script>
    </body>
    </html>
    """
    escaped_html = html.escape(iframe_content)
    return f'<iframe srcdoc="{escaped_html}" style="width: 100%; height: 500px; border: 1px solid #ccc;"></iframe>'

def process_and_display_maps(region_name, year1, year2, year3):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è Gradio."""
    if not gee_classifier:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º 4 –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
        return None, None, None, "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å GEE."

    region_info = get_region_info(region_name)
   
    years = sorted(list(set([year1, year2, year3])), reverse=True) #–±—ã–ª–æ reverse=True
    
    outputs, messages = [], []
    print(f"\nüöÄ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å! –†–µ–≥–∏–æ–Ω: {region_name}, –ì–æ–¥—ã: {years}")
    for year in years:
        map_data, msg = generate_classified_map(region_info, year, gee_classifier)
        if map_data: outputs.append(create_map_iframe_html(map_data, region_name))
        else: outputs.append(f"<p style='text-align:center; padding-top: 200px;'>{msg}</p>")
        if msg: messages.append(msg)
    
    while len(outputs) < 3: outputs.append(None)
    
    final_message = "‚úÖ –ì–æ—Ç–æ–≤–æ. " + " ".join(messages)
    return outputs[0], outputs[1], outputs[2], final_message


# =======================================================================
# –®–ê–ì 5: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio
# =======================================================================

with gr.Blocks(
    css="""
    /* 1. –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –®–†–ò–§–¢ MONTSERRAT –° GOOGLE FONTS */
    @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');

    /*
       –≠—Ç–æ—Ç CSS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥:
       1. –§–æ–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (body).
       2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–∞—è, –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ GitHub.
       3. !important –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–±–∏—Ç—å –ª—é–±—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏ Gradio.
       4. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç—Å—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏, —á—Ç–æ–±—ã —Ñ–æ–Ω –±—ã–ª –≤–∏–¥–µ–Ω.
    */
    body, gradio-app {
        /* –ü–†–ò–ú–ï–ù–Ø–ï–ú –ù–û–í–´–ô –®–†–ò–§–¢ –ö–û –í–°–ï–ú–£ –ü–†–ò–õ–û–ñ–ï–ù–ò–Æ */
        font-family: 'Montserrat', sans-serif !important;
        
        background-image: url("https://raw.githubusercontent.com/AnnaZverev/Landcover/refs/heads/main/picture.jpg") !important;
        background-size: cover !important;
        background-position: center !important;
        background-repeat: no-repeat !important;
        background-attachment: fixed !important;
        min-height: 100vh;
    }

    /* –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ –∏ –¥–µ–ª–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º */
    .gradio-container {
        max-width: none !important;
        background: transparent !important;
    }

    /* –î–µ–ª–∞–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –±–ª–æ–∫–∏ —Ç–æ–∂–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏, —á—Ç–æ–±—ã —Ñ–æ–Ω –±—ã–ª –≤–∏–¥–µ–Ω –≤–µ–∑–¥–µ */
    .gradio-container .gr-panel, .gradio-container .gr-form, .gradio-container .gr-row {
        background: transparent !important;
        border: none !important;
        box-shadow: none !important;
    }

    /* –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤—É—é –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é "–ø–æ–¥–ª–æ–∂–∫—É" —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */
    .gradio-container .gr-column {
        background-color: rgba(0, 0, 0, 0.5) !important; /* –ß–µ—Ä–Ω—ã–π, –Ω–∞ 50% –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π */
        border-radius: 15px !important;
        padding: 20px !important;
    }


    /* –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —á–∏—Ç–∞–µ–º—ã–º –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–æ–≤—ã–π —à—Ä–∏—Ñ—Ç */
    .gradio-container h1, .gradio-container p, .gradio-container label, .gradio-container .message, .gradio-container .gr-button {
        font-family: 'Montserrat', sans-serif !important; /* –î–£–ë–õ–ò–†–£–ï–ú –î–õ–Ø –ù–ê–î–ï–ñ–ù–û–°–¢–ò */
        color: white !important;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    }
    """
) as demo:


    _ = gr.Image('picture.jpg', visible=False, interactive=False)
    gr.Markdown("# üõ∞Ô∏è –ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä–æ–≤–∞")
    gr.Markdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏ –¥–æ —Ç—Ä—ë—Ö –ª–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ö–∞—Ä—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (–æ—Ç –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–≥–æ –≥–æ–¥–∞ –∫ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–µ–º—É).")
    with gr.Row():
        with gr.Column(scale=1):
            region_dropdown = gr.Dropdown(
                label="–†–µ–≥–∏–æ–Ω",
                choices=[
                    "–ö–∞–ª–º—ã–∫–∏—è (–û–∑–µ—Ä–æ –ù—É—Ä—ã–Ω-–•–∞–≥)",
                    "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (–û–∑–µ—Ä–æ –≠–ª—å—Ç–æ–Ω)",
                    "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π (–ß–æ–≥—Ä–∞–π—Å–∫–æ–µ –≤–¥—Ö—Ä.)",
                    "–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (–í–æ—Å—Ç–æ—á–Ω—ã–µ —Å—Ç–µ–ø–∏)",
                    "–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π (–ö—É–ª—É–Ω–¥–∏–Ω—Å–∫–∞—è —Å—Ç–µ–ø—å)",
                    "–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (–°–æ–ª—å-–ò–ª–µ—Ü–∫)"
                ],
                value="–ö–∞–ª–º—ã–∫–∏—è (–û–∑–µ—Ä–æ –ù—É—Ä—ã–Ω-–•–∞–≥)" # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            year1_slider = gr.Slider(label="–ì–æ–¥ 1", minimum=2019, maximum=2025, step=1, value=2019)
            year2_slider = gr.Slider(label="–ì–æ–¥ 2", minimum=2019, maximum=2025, step=1, value=2021)
            year3_slider = gr.Slider(label="–ì–æ–¥ 3", minimum=2019, maximum=2025, step=1, value=2023)
            submit_button = gr.Button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã", variant="primary")
            status_message = gr.Markdown()
    with gr.Row():
        map1_output = gr.HTML()
        map2_output = gr.HTML()
        map3_output = gr.HTML()
    submit_button.click(
        fn=process_and_display_maps,
        inputs=[region_dropdown, year1_slider, year2_slider, year3_slider],
        outputs=[map1_output, map2_output, map3_output, status_message])

# --- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
print("\n--- –ó–∞–ø—É—Å–∫ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---")
# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Render.
# –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç (–ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º 7860 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
port = int(os.environ.get('PORT', 7860))
# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
demo.launch(server_name="0.0.0.0", server_port=port)


















