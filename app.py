# =======================================================================
# –®–ê–ì 1: –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
# =======================================================================
import os
import json
import ee
import geemap
import gradio as gr
import html

# =======================================================================
# –®–ê–ì 2: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GEE (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞)
# =======================================================================
print("\n--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Earth Engine ---")
try:
    # Render —Å–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ /etc/secrets/google_credentials.json
    secret_file_path = '/etc/secrets/google_credentials.json'
    if os.path.exists(secret_file_path):
        print("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª Render...")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–∞–π–ª–∞
        credentials = ee.ServiceAccountCredentials(None, key_file=secret_file_path)
        ee.Initialize(credentials=credentials)
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç GEE –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    else:
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        print("–°–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        ee.Authenticate()
        ee.Initialize(project='gen-lang-client-0605302377')
        print("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GEE –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ.")

except Exception as e:
    print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GEE: {e}")

# =======================================================================
# –®–ê–ì 3: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
# =======================================================================
gee_classifier = None
bands_for_training = ['B2', 'B3', 'B4', 'B8', 'NDVI']

def add_ndvi(image):
    ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI')
    return image.addBands(ndvi)

def train_classifier():
    global gee_classifier
    if gee_classifier:
        print("‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É–∂–µ –æ–±—É—á–µ–Ω.")
        return

    print("‚è≥ –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ GEE... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã.")
    try:
        desert = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_desert_samples').map(lambda f: f.set('class', 0))
        solonchak = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_solonchak_samples').map(lambda f: f.set('class', 1))
        arid = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_arid_samples').map(lambda f: f.set('class', 2))
        greenery = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_greenery_samples').map(lambda f: f.set('class', 3))
        water = ee.FeatureCollection('projects/gen-lang-client-0605302377/assets/kalmykia_water_samples').map(lambda f: f.set('class', 4))
        
        training_points = desert.merge(solonchak).merge(arid).merge(greenery).merge(water)
        roi_for_training = training_points.geometry().bounds()

        image_for_training = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED') \
            .filterDate('2023-06-01', '2023-09-01') \
            .filterBounds(roi_for_training) \
            .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10)) \
            .map(add_ndvi) \
            .median() \
            .clip(roi_for_training)

        training_data = image_for_training.select(bands_for_training).sampleRegions(
            collection=training_points, properties=['class'], scale=10, tileScale=4)

        gee_classifier = ee.Classifier.smileRandomForest(numberOfTrees=50).train(
            features=training_data, classProperty='class', inputProperties=bands_for_training)
        print("‚úÖ –ú–æ–¥–µ–ª—å-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ 5 –∫–ª–∞—Å—Å–∞—Ö!")
    except Exception as e:
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")

train_classifier()

# =======================================================================
# –®–ê–ì 4: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã Gradio-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# =======================================================================

def get_region_info(region_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ BBOX –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."""
    regions = {
        "–≠–ª–∏—Å—Ç–∞ (—Ç–µ—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å)": {
            "center": [46.307, 44.258],
            "bbox": [44.15, 46.25, 44.35, 46.35]
        },
        "–û–∑–µ—Ä–æ –°–∞—Ä–ø–∞ (–ö–∞–ª–º—ã–∫–∏—è)": {
            "center": [47.85, 44.75],
            "bbox": [44.65, 47.80, 44.85, 47.90]
        },
        "–û–∑–µ—Ä–æ –ù—É—Ä—ã–Ω-–•–∞–≥ (–ö–∞–ª–º—ã–∫–∏—è)": {
            "center": [46.817790, 45.354546],
            "bbox": [45.25, 46.71, 45.45, 46.91]
        },
        "–ê—Ä–∑–≥–∏—Ä (–°—Ç–∞–≤—Ä–æ–ø. –∫—Ä–∞–π)": {
            "center": [45.38, 44.22],
            "bbox": [44.12, 45.33, 44.32, 45.43]
        },
        "–ë—É–¥—ë–Ω–Ω–æ–≤—Å–∫ (–°—Ç–∞–≤—Ä–æ–ø. –∫—Ä–∞–π)": {
            "center": [44.78, 44.15],
            "bbox": [44.05, 44.73, 44.25, 44.83]
        },
        "–î–µ–ª—å—Ç–∞ –í–æ–ª–≥–∏ (–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å)": {
            "center": [46.0, 48.5],
            "bbox": [47.9, 45.6, 49.1, 46.4]
        },
        "–û–∑–µ—Ä–æ –ë–∞–π–∫–∞–ª (–æ. –û–ª—å—Ö–æ–Ω)": {
            "center": [53.15, 107.34],
            "bbox": [106.84, 52.75, 107.84, 53.55]
        },
        "–ú–æ—Å–∫–≤–∞ (—Ç–µ—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å)": {
            "center": [55.75, 37.61],
            "bbox": [37.5, 55.7, 37.7, 55.8]
        }
    }
    return regions.get(region_name)

def generate_classified_map(region_info, year, classifier):
    if not classifier: return None, "–û—à–∏–±–∫–∞: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –æ–±—É—á–µ–Ω."
    print(f"-- –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –¥–ª—è {year} –≥–æ–¥–∞...")
    roi_to_classify = ee.Geometry.Rectangle(region_info['bbox'])
    collection = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED') \
        .filterDate(f'{year}-06-01', f'{year}-09-01') \
        .filterBounds(roi_to_classify) \
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 25))
    if collection.size().getInfo() == 0: return None, f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–Ω–∏–º–∫–æ–≤ –∑–∞ {year} –≥–æ–¥."
    image_to_classify = collection.map(add_ndvi).median().clip(roi_to_classify)
    classified_image = image_to_classify.classify(classifier)
    class_palette = ['#e3a25a', '#ffffff', '#ffff00', '#00ff00', '#0000FF'] # –ü—É—Å—Ç—ã–Ω—è, –°–æ–ª–æ–Ω—á–∞–∫, –°—É—Ö–∞—è —Å—Ç–µ–ø—å, –ó–µ–ª–µ–Ω—å, –í–æ–¥–∞
    vis_params = {'min': 0, 'max': 4, 'palette': class_palette}
    map_id = classified_image.getMapId(vis_params)
    print(f"-- ‚úÖ –ö–∞—Ä—Ç–∞ –¥–ª—è {year} –≥–æ–¥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
    return {"center": region_info['center'], "tile_url": map_id['tile_fetcher'].url_format, "year": year}, None

def create_map_iframe_html(map_data, region_name):
    center, tile_url, year = map_data['center'], map_data['tile_url'], map_data['year']
    iframe_content = f"""
    <!DOCTYPE html><html><head><title>–ö–∞—Ä—Ç–∞ {year}</title><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" /><script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script><style>html, body, #map {{ height: 100%; width: 100%; margin: 0; padding: 0; }}</style></head><body><div id="map"></div><script>
        var map = L.map('map').setView([{center[0]}, {center[1]}], 12);
        L.tileLayer('https://{{s}}.tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png', {{ attribution: '&copy; OpenStreetMap' }}).addTo(map);
        L.tileLayer(`{tile_url}`, {{ attribution: 'Google Earth Engine' }}).addTo(map);
    </script></body></html>"""
    escaped_html = html.escape(iframe_content)
    return f'<iframe srcdoc="{escaped_html}" style="width: 100%; height: 500px; border: 1px solid #ccc;"></iframe>'

def process_and_display_maps(region_name, year1, year2, year3):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è Gradio."""
    if not gee_classifier:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º 4 –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
        return None, None, None, "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å GEE."

    region_info = get_region_info(region_name)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é (–æ—Ç –Ω–æ–≤–æ–≥–æ –∫ —Å—Ç–∞—Ä–æ–º—É)
    years = sorted(list(set([year1, year2, year3])), reverse=True)
    
    outputs, messages = [], []
    print(f"\nüöÄ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å! –†–µ–≥–∏–æ–Ω: {region_name}, –ì–æ–¥—ã: {years}")
    for year in years:
        map_data, msg = generate_classified_map(region_info, year, gee_classifier)
        if map_data: outputs.append(create_map_iframe_html(map_data, region_name))
        else: outputs.append(f"<p style='text-align:center; padding-top: 200px;'>{msg}</p>")
        if msg: messages.append(msg)
    
    while len(outputs) < 3: outputs.append(None)
    
    final_message = "‚úÖ –ì–æ—Ç–æ–≤–æ. " + " ".join(messages)
    return outputs[0], outputs[1], outputs[2], final_message


# =======================================================================
# –®–ê–ì 5: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio
# =======================================================================
with gr.Blocks(css=".gradio-container {max-width: 1200px !important;}") as demo:
    gr.Markdown("# üõ∞Ô∏è –ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∫—Ä–æ–≤–∞")
    gr.Markdown("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏ –¥–æ —Ç—Ä—ë—Ö –ª–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ö–∞—Ä—Ç—ã –±—É–¥—É—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ (—Å–ª–µ–≤–∞) –∫ —Å–∞–º–æ–º—É —Å—Ç–∞—Ä–æ–º—É (—Å–ø—Ä–∞–≤–∞).")
    with gr.Row():
        with gr.Column(scale=1):
            region_dropdown = gr.Dropdown(
                label="–†–µ–≥–∏–æ–Ω",
                choices=[
                    "–≠–ª–∏—Å—Ç–∞ (—Ç–µ—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å)",
                    "–û–∑–µ—Ä–æ –°–∞—Ä–ø–∞ (–ö–∞–ª–º—ã–∫–∏—è)",
                    "–û–∑–µ—Ä–æ –ù—É—Ä—ã–Ω-–•–∞–≥ (–ö–∞–ª–º—ã–∫–∏—è)",
                    "–ê—Ä–∑–≥–∏—Ä (–°—Ç–∞–≤—Ä–æ–ø. –∫—Ä–∞–π)",
                    "–ë—É–¥—ë–Ω–Ω–æ–≤—Å–∫ (–°—Ç–∞–≤—Ä–æ–ø. –∫—Ä–∞–π)",
                    "–î–µ–ª—å—Ç–∞ –í–æ–ª–≥–∏ (–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å)",
                    "–û–∑–µ—Ä–æ –ë–∞–π–∫–∞–ª (–æ. –û–ª—å—Ö–æ–Ω)",
                    "–ú–æ—Å–∫–≤–∞ (—Ç–µ—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å)"
                ],
                value="–≠–ª–∏—Å—Ç–∞ (—Ç–µ—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å)")
            year1_slider = gr.Slider(label="–ì–æ–¥ 1", minimum=2019, maximum=2025, step=1, value=2023)
            year2_slider = gr.Slider(label="–ì–æ–¥ 2", minimum=2019, maximum=2025, step=1, value=2021)
            year3_slider = gr.Slider(label="–ì–æ–¥ 3", minimum=2019, maximum=2025, step=1, value=2019)
            submit_button = gr.Button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã", variant="primary")
            status_message = gr.Markdown()
    with gr.Row():
        map1_output = gr.HTML()
        map2_output = gr.HTML()
        map3_output = gr.HTML()
    submit_button.click(
        fn=process_and_display_maps,
        inputs=[region_dropdown, year1_slider, year2_slider, year3_slider],
        outputs=[map1_output, map2_output, map3_output, status_message])

# --- –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
print("\n--- –ó–∞–ø—É—Å–∫ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---")

demo.launch()
